#!/bin/bash
#set -x

source $HOME/.hostconfigrc

host=$(hostname)
today=$(date -u +%Y-%m-%d)

if [ -z "$BACKUP_HOME" ] ; then
  echo "Missing BACKUP_HOME definition." 1>&2
  exit 1
fi

DEST_HOME="${BACKUP_HOME}/${LOGNAME}/hosts"
DEST_PATH="${DEST_HOME}/${host}/${today}"
DEST=$DEST_PATH

LOG="$LOG_DIR/backup-${LOGNAME}-${host}-${today}.log"

RSYNC_OPTS="-v -a -z -R"
if [ -n "$BACKUP_SERVER" ] ; then
  RSYNC_OPTS="-e ssh $RSYNC_OPTS"
  DEST="${BACKUP_SERVER}:${DEST}"
fi

# Snapshot keep settings
KEEP_COUNT_MIN=${KEEP_COUNT_MIN:-10}
KEEP_MONTH_MIN=${KEEP_MONTH_MIN:-12}

# day of year to keep forever, 1 - 365
YEAR_DAY_TO_KEEP=${YEAR_DAY_TO_KEEP:-1}
# day of month to keep (KEEP_MONTH_MIN), 1 - 31
MONTH_DAY_TO_KEEP=${MONTH_DAY_TO_KEEP:-1}

# Run with V=1 for debug, etc
V=${V:-3}

log() {
  local level=$1 ; shift
  local level_str=$1 ; shift
  local msg=$1 ; shift

  if [ $level -ge $V ] ; then
    printf "%s %s $msg\n" $(date -u -Iseconds) $level_str >> $LOG
  fi
}
debug() { log 1 "DEBUG" "$1"; }
info()  { log 3 "INFO" "$1"; }
warn()  { log 5 "WARN" "$1"; }
error() { log 6 "ERROR" "$1"; }

report() {
  if [ -n "$MAILTO" ] ; then
    mail -s "Backup failure report $today" $MAILTO
  else
    {
      echo "== Backup failure report $today =="
      cat
    } >>"$LOG_DIR/error-report"
  fi
}

backup() {
  local path=$1; shift
  if [ -f $path ] || [ -d $path ] ; then
    info "backing up $path"

    if [ -n "$BACKUP_SERVER" ] ; then
      info "run: ssh $BACKUP_SERVER mkdir -p $DEST_PATH"
      ssh $BACKUP_SERVER "mkdir -p $DEST_PATH"
    fi

    info "run: rsync $RSYNC_OPTS $path $DEST"
    if ! rsync $RSYNC_OPTS $path $DEST >> $LOG ; then
        error "backup FAILED $path $today"
    fi

    info "done"
  else
    warn "Backup path $path doesn't exist"
  fi
}

keep_snapshot() {
  local snapshot=$1
  count_snapshots=$((count_snapshots+1))

  day_of_month=`date +'%d' -d "$snapshot"`
  day_of_year=`date +'%j' -d "$snapshot"`

  if [ $count_snapshots  -le $KEEP_COUNT_MIN ] ; then
    debug "Maintaining snapshot $snapshot as count $count_snapshots is less than $KEEP_COUNT_MIN"
    return 0
  fi
  if [ $month_snapshots  -le $KEEP_MONTH_MIN ] \
      && [ $day_of_month -eq $MONTH_DAY_TO_KEEP ] ; then
    debug "Maintaining month snapshot $snapshot as count $month_snapshots is less than $KEEP_MONTH_MIN"
    month_snapshots=$((month_snapshots+1))
    return 0
  fi
  if [ $day_of_year -eq $YEAR_DAY_TO_KEEP ] ; then
    debug "Maintaining year snapshot $snapshot"
    return 0
  fi
  return 1
}


##### MAIN #####

info "Starting: $0 user: $LOGNAME pid: $$ Logging to file: $LOG"

# 1. if local, remove old stuff
#  keep daily           snapshots for 1 week
#  keep weekly (sunday) snapshots for 1 year
#  keep yearly (jan 1)  snapshots forever 

if [ -d $BACKUP_HOME ] ; then
  info "Cleaning up $DEST_HOME"
  for snapshot in `find $DEST_HOME -maxdepth 2 | grep '/....-..-..$'`; do
    snapshot_dt=`basename $snapshot`
    snapshot_base=`dirname $snapshot`

    # If we start working on a new directory reset counters
    if [ "$snapshot_base" != "$last_snapshot_base" ] ; then
      last_snapshot_base="$snapshot_base"
      count_snapshots=0
      month_snapshots=0
    fi

    if keep_snapshot $snapshot_dt; then
      info "Keeping snapshot $snapshot"
    else
      info "Purging snapshot $snapshot"
      rm -rf $snapshot
    fi
  done
fi

# 2. backup today
if [ -f $HOME/.backups ] ; then
  while read path; do
    backup $path </dev/null
  done <$HOME/.backups
else
  warn "No backups, you need to define $HOME/.backups"
fi

# Check logs for errors and report
if grep -q " ERROR " $LOG ; then
  {
    echo "Dear Sysop,"
    echo
    echo "We have detected a problem, please consult the log for more detail."
    echo "Host: $host"
    echo "Log: $LOG"
    echo
    grep " ERROR " $LOG 
  } | report
fi
